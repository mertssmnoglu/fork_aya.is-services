// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package storage

import (
	"context"
	"database/sql"
	"time"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO
  session (
    id,
    status,
    oauth_request_state,
    oauth_request_code_verifier,
    oauth_redirect_uri,
    logged_in_user_id,
    logged_in_at,
    expires_at,
    created_at,
    updated_at
  )
VALUES
  (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
  )
`

type CreateSessionParams struct {
	ID                       string         `db:"id" json:"id"`
	Status                   string         `db:"status" json:"status"`
	OauthRequestState        string         `db:"oauth_request_state" json:"oauth_request_state"`
	OauthRequestCodeVerifier string         `db:"oauth_request_code_verifier" json:"oauth_request_code_verifier"`
	OauthRedirectURI         sql.NullString `db:"oauth_redirect_uri" json:"oauth_redirect_uri"`
	LoggedInUserID           sql.NullString `db:"logged_in_user_id" json:"logged_in_user_id"`
	LoggedInAt               sql.NullTime   `db:"logged_in_at" json:"logged_in_at"`
	ExpiresAt                sql.NullTime   `db:"expires_at" json:"expires_at"`
	CreatedAt                time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt                sql.NullTime   `db:"updated_at" json:"updated_at"`
}

// CreateSession
//
//	INSERT INTO
//	  session (
//	    id,
//	    status,
//	    oauth_request_state,
//	    oauth_request_code_verifier,
//	    oauth_redirect_uri,
//	    logged_in_user_id,
//	    logged_in_at,
//	    expires_at,
//	    created_at,
//	    updated_at
//	  )
//	VALUES
//	  (
//	    $1,
//	    $2,
//	    $3,
//	    $4,
//	    $5,
//	    $6,
//	    $7,
//	    $8,
//	    $9,
//	    $10
//	  )
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession,
		arg.ID,
		arg.Status,
		arg.OauthRequestState,
		arg.OauthRequestCodeVerifier,
		arg.OauthRedirectURI,
		arg.LoggedInUserID,
		arg.LoggedInAt,
		arg.ExpiresAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT
  id,
  status,
  oauth_request_state,
  oauth_request_code_verifier,
  oauth_redirect_uri,
  logged_in_user_id,
  logged_in_at,
  expires_at,
  created_at,
  updated_at
FROM
  session
WHERE
  id = $1
`

type GetSessionByIDParams struct {
	ID string `db:"id" json:"id"`
}

// GetSessionByID
//
//	SELECT
//	  id,
//	  status,
//	  oauth_request_state,
//	  oauth_request_code_verifier,
//	  oauth_redirect_uri,
//	  logged_in_user_id,
//	  logged_in_at,
//	  expires_at,
//	  created_at,
//	  updated_at
//	FROM
//	  session
//	WHERE
//	  id = $1
func (q *Queries) GetSessionByID(ctx context.Context, arg GetSessionByIDParams) (*Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, arg.ID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.OauthRequestState,
		&i.OauthRequestCodeVerifier,
		&i.OauthRedirectURI,
		&i.LoggedInUserID,
		&i.LoggedInAt,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateSessionLoggedInAt = `-- name: UpdateSessionLoggedInAt :exec
UPDATE
  session
SET
  logged_in_at = $1,
  updated_at = NOW()
WHERE
  id = $2
`

type UpdateSessionLoggedInAtParams struct {
	LoggedInAt sql.NullTime `db:"logged_in_at" json:"logged_in_at"`
	ID         string       `db:"id" json:"id"`
}

// UpdateSessionLoggedInAt
//
//	UPDATE
//	  session
//	SET
//	  logged_in_at = $1,
//	  updated_at = NOW()
//	WHERE
//	  id = $2
func (q *Queries) UpdateSessionLoggedInAt(ctx context.Context, arg UpdateSessionLoggedInAtParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionLoggedInAt, arg.LoggedInAt, arg.ID)
	return err
}
