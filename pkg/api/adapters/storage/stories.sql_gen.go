// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stories.sql

package storage

import (
	"context"
	"database/sql"
)

const getStoryByID = `-- name: GetStoryByID :one
SELECT s.id, s.author_profile_id, s.slug, s.kind, s.status, s.is_featured, s.story_picture_uri, s.title, s.summary, s.content, s.properties, s.published_at, s.created_at, s.updated_at, s.deleted_at, st.story_id, st.locale_code, st.title, st.summary, st.content, p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
FROM "story" s
  INNER JOIN "story_tx" st ON st.story_id = s.id
  AND st.locale_code = $1
  LEFT JOIN "profile" p ON p.id = s.author_profile_id AND p.deleted_at IS NULL
  INNER JOIN "profile_tx" pt ON pt.profile_id = p.id AND pt.locale_code = $1
WHERE s.id = $2
  AND s.deleted_at IS NULL
LIMIT 1
`

type GetStoryByIDParams struct {
	LocaleCode string `db:"locale_code" json:"locale_code"`
	ID         string `db:"id" json:"id"`
}

type GetStoryByIDRow struct {
	Story     Story     `db:"story" json:"story"`
	StoryTx   StoryTx   `db:"story_tx" json:"story_tx"`
	Profile   Profile   `db:"profile" json:"profile"`
	ProfileTx ProfileTx `db:"profile_tx" json:"profile_tx"`
}

// GetStoryByID
//
//	SELECT s.id, s.author_profile_id, s.slug, s.kind, s.status, s.is_featured, s.story_picture_uri, s.title, s.summary, s.content, s.properties, s.published_at, s.created_at, s.updated_at, s.deleted_at, st.story_id, st.locale_code, st.title, st.summary, st.content, p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
//	FROM "story" s
//	  INNER JOIN "story_tx" st ON st.story_id = s.id
//	  AND st.locale_code = $1
//	  LEFT JOIN "profile" p ON p.id = s.author_profile_id AND p.deleted_at IS NULL
//	  INNER JOIN "profile_tx" pt ON pt.profile_id = p.id AND pt.locale_code = $1
//	WHERE s.id = $2
//	  AND s.deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetStoryByID(ctx context.Context, arg GetStoryByIDParams) (*GetStoryByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getStoryByID, arg.LocaleCode, arg.ID)
	var i GetStoryByIDRow
	err := row.Scan(
		&i.Story.ID,
		&i.Story.AuthorProfileID,
		&i.Story.Slug,
		&i.Story.Kind,
		&i.Story.Status,
		&i.Story.IsFeatured,
		&i.Story.StoryPictureURI,
		&i.Story.Title,
		&i.Story.Summary,
		&i.Story.Content,
		&i.Story.Properties,
		&i.Story.PublishedAt,
		&i.Story.CreatedAt,
		&i.Story.UpdatedAt,
		&i.Story.DeletedAt,
		&i.StoryTx.StoryID,
		&i.StoryTx.LocaleCode,
		&i.StoryTx.Title,
		&i.StoryTx.Summary,
		&i.StoryTx.Content,
		&i.Profile.ID,
		&i.Profile.Slug,
		&i.Profile.Kind,
		&i.Profile.CustomDomain,
		&i.Profile.ProfilePictureURI,
		&i.Profile.Pronouns,
		&i.Profile.Properties,
		&i.Profile.CreatedAt,
		&i.Profile.UpdatedAt,
		&i.Profile.DeletedAt,
		&i.ProfileTx.ProfileID,
		&i.ProfileTx.LocaleCode,
		&i.ProfileTx.Title,
		&i.ProfileTx.Description,
		&i.ProfileTx.Properties,
	)
	return &i, err
}

const getStoryIDBySlug = `-- name: GetStoryIDBySlug :one
SELECT id
FROM "story"
WHERE slug = $1
  AND deleted_at IS NULL
LIMIT 1
`

type GetStoryIDBySlugParams struct {
	Slug string `db:"slug" json:"slug"`
}

// GetStoryIDBySlug
//
//	SELECT id
//	FROM "story"
//	WHERE slug = $1
//	  AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetStoryIDBySlug(ctx context.Context, arg GetStoryIDBySlugParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getStoryIDBySlug, arg.Slug)
	var id string
	err := row.Scan(&id)
	return id, err
}

const listStories = `-- name: ListStories :many

SELECT
  s.id, s.author_profile_id, s.slug, s.kind, s.status, s.is_featured, s.story_picture_uri, s.title, s.summary, s.content, s.properties, s.published_at, s.created_at, s.updated_at, s.deleted_at,
  st.story_id, st.locale_code, st.title, st.summary, st.content,
  p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at,
  pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
FROM "story_publication" sp
  INNER JOIN "story" s ON s.id = sp.story_id
  AND s.deleted_at IS NULL
  AND s.published_at IS NOT NULL
  INNER JOIN "story_tx" st ON st.story_id = s.id
  AND ($1::TEXT IS NULL OR s.kind = ANY(string_to_array($1::TEXT, ',')))
  AND ($2::CHAR(26) IS NULL OR s.author_profile_id = $2::CHAR(26))
  AND st.locale_code = $3
  LEFT JOIN "profile" p ON p.id = s.author_profile_id
  AND p.deleted_at IS NULL
  INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
  AND pt.locale_code = $3
WHERE
  ($4::CHAR(26) IS NULL OR sp.profile_id = $4::CHAR(26))
  AND s.deleted_at IS NULL
ORDER BY s.published_at DESC
`

type ListStoriesParams struct {
	FilterKind                 sql.NullString `db:"filter_kind" json:"filter_kind"`
	FilterAuthorProfileID      sql.NullString `db:"filter_author_profile_id" json:"filter_author_profile_id"`
	LocaleCode                 string         `db:"locale_code" json:"locale_code"`
	FilterPublicationProfileID sql.NullString `db:"filter_publication_profile_id" json:"filter_publication_profile_id"`
}

type ListStoriesRow struct {
	Story     Story     `db:"story" json:"story"`
	StoryTx   StoryTx   `db:"story_tx" json:"story_tx"`
	Profile   Profile   `db:"profile" json:"profile"`
	ProfileTx ProfileTx `db:"profile_tx" json:"profile_tx"`
}

// -- name: ListStories :many
// SELECT sqlc.embed(s), sqlc.embed(st), sqlc.embed(p), sqlc.embed(pt)
// FROM "story" s
//
//	INNER JOIN "story_tx" st ON st.story_id = s.id
//	AND (sqlc.narg(filter_kind)::TEXT IS NULL OR s.kind = ANY(string_to_array(sqlc.narg(filter_kind)::TEXT, ',')))
//	AND (sqlc.narg(filter_author_profile_id)::CHAR(26) IS NULL OR s.author_profile_id = sqlc.narg(filter_author_profile_id)::CHAR(26))
//	AND st.locale_code = sqlc.arg(locale_code)
//	LEFT JOIN "profile" p ON p.id = s.author_profile_id AND p.deleted_at IS NULL
//	INNER JOIN "profile_tx" pt ON pt.profile_id = p.id AND pt.locale_code = sqlc.arg(locale_code)
//
// WHERE s.deleted_at IS NULL
// ORDER BY s.published_at DESC;
//
//	SELECT
//	  s.id, s.author_profile_id, s.slug, s.kind, s.status, s.is_featured, s.story_picture_uri, s.title, s.summary, s.content, s.properties, s.published_at, s.created_at, s.updated_at, s.deleted_at,
//	  st.story_id, st.locale_code, st.title, st.summary, st.content,
//	  p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at,
//	  pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
//	FROM "story_publication" sp
//	  INNER JOIN "story" s ON s.id = sp.story_id
//	  AND s.deleted_at IS NULL
//	  AND s.published_at IS NOT NULL
//	  INNER JOIN "story_tx" st ON st.story_id = s.id
//	  AND ($1::TEXT IS NULL OR s.kind = ANY(string_to_array($1::TEXT, ',')))
//	  AND ($2::CHAR(26) IS NULL OR s.author_profile_id = $2::CHAR(26))
//	  AND st.locale_code = $3
//	  LEFT JOIN "profile" p ON p.id = s.author_profile_id
//	  AND p.deleted_at IS NULL
//	  INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
//	  AND pt.locale_code = $3
//	WHERE
//	  ($4::CHAR(26) IS NULL OR sp.profile_id = $4::CHAR(26))
//	  AND s.deleted_at IS NULL
//	ORDER BY s.published_at DESC
func (q *Queries) ListStories(ctx context.Context, arg ListStoriesParams) ([]*ListStoriesRow, error) {
	rows, err := q.db.QueryContext(ctx, listStories,
		arg.FilterKind,
		arg.FilterAuthorProfileID,
		arg.LocaleCode,
		arg.FilterPublicationProfileID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListStoriesRow{}
	for rows.Next() {
		var i ListStoriesRow
		if err := rows.Scan(
			&i.Story.ID,
			&i.Story.AuthorProfileID,
			&i.Story.Slug,
			&i.Story.Kind,
			&i.Story.Status,
			&i.Story.IsFeatured,
			&i.Story.StoryPictureURI,
			&i.Story.Title,
			&i.Story.Summary,
			&i.Story.Content,
			&i.Story.Properties,
			&i.Story.PublishedAt,
			&i.Story.CreatedAt,
			&i.Story.UpdatedAt,
			&i.Story.DeletedAt,
			&i.StoryTx.StoryID,
			&i.StoryTx.LocaleCode,
			&i.StoryTx.Title,
			&i.StoryTx.Summary,
			&i.StoryTx.Content,
			&i.Profile.ID,
			&i.Profile.Slug,
			&i.Profile.Kind,
			&i.Profile.CustomDomain,
			&i.Profile.ProfilePictureURI,
			&i.Profile.Pronouns,
			&i.Profile.Properties,
			&i.Profile.CreatedAt,
			&i.Profile.UpdatedAt,
			&i.Profile.DeletedAt,
			&i.ProfileTx.ProfileID,
			&i.ProfileTx.LocaleCode,
			&i.ProfileTx.Title,
			&i.ProfileTx.Description,
			&i.ProfileTx.Properties,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
