name: development

services:
  api:
    tty: true
    stdin_open: true
    restart: unless-stopped
    build:
      context: ../../
      dockerfile: ./ops/docker/Dockerfile
      target: runner-development
    develop:
      watch:
        - action: sync+restart
          path: ../
          target: /app/
          ignore:
            - .*
            - tmp/
    environment:
      ENV: ${env:-development}
      PORT: 8080
      LOG__LEVEL: INFO
      LOG__PRETTY: false
      CONN__targets__default__dsn: postgres://postgres:s3cr3t@postgres:5432/postgres?sslmode=disable
      CONN__targets__telemetry__dsn: otel-collector:4318
      CONN__targets__telemetry__properties__service_name: aya.is-services
    networks:
      - aya-is-network
    ports:
      - 8080:8080
    depends_on:
      postgres:
        condition: service_healthy
      otel-collector:
        condition: service_started

  postgres:
    image: postgres:16-bookworm
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: s3cr3t
    healthcheck:
      test: ["CMD-SHELL", "psql -U 'postgres' -c '\\q'"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./resources/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aya-is-network
    ports:
      - 5432:5432

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:9090/-/ready"]
    #   interval: 15s
    #   timeout: 5s
    #   retries: 5
    volumes:
      - ./resources/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - aya-is-network
    ports:
      - 9090:9090
    depends_on:
      otel-collector:
        condition: service_started

  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    user: 0:0
    command: ["--config.file=/etc/loki/loki.yaml", "--config.expand-env=true"]
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:3100/ready"]
    #   interval: 15s
    #   timeout: 5s
    #   retries: 5
    volumes:
      - ./resources/loki/loki.yaml:/etc/loki/loki.yaml:ro
      # - loki-data:/var/loki
    networks:
      - aya-is-network
    ports:
      - 3100:3100

  tempo:
    image: grafana/tempo:latest
    restart: unless-stopped
    command: ["--config.file=/etc/tempo/tempo.yaml", "--config.expand-env=true"]
    # healthcheck:
    #   test: ["CMD", "wget", "--quiet", "--tries=1", "--timeout=5", "-O", "/dev/null", "http://localhost:3200/ready"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    volumes:
      - ./resources/tempo/tempo.yaml:/etc/tempo/tempo.yaml:ro
      - tempo-data:/var/tempo
    ports:
      - 3200:3200
    networks:
      - aya-is-network
    # depends_on:
    #   loki:
    #     condition: service_started

  pyroscope:
    image: grafana/pyroscope:latest
    command: ["--self-profiling.disable-push=true"]
    ports:
      - 4040:4040
    networks:
      - aya-is-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    restart: unless-stopped
    command: ["--config=/etc/otel-collector/otel-collector.yaml", "--feature-gates=service.profilesSupport"]
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:13133/healthz"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    volumes:
      - ./resources/otel-collector/otel-collector.yaml:/etc/otel-collector/otel-collector.yaml:ro
    ports:
      - 4317:4317   # OTLP gRPC receiver
      - 4318:4318   # OTLP HTTP receiver
      - 8889:8889   # Prometheus metrics export
      - 13133:13133 # Health check
    networks:
      - aya-is-network
    depends_on:
      # postgres:
      #   condition: service_healthy
      tempo:
        condition: service_started
      pyroscope:
        condition: service_started

  grafana:
    image: grafana/grafana:main
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    environment:
      GF_INSTALL_PLUGINS: grafana-pyroscope-app
      # GF_SECURITY_ADMIN_USER: admin
      # GF_SECURITY_ADMIN_PASSWORD: admin
      # GF_AUTH_DISABLE_LOGIN_FORM: true
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./resources/grafana/provisioning:/etc/grafana/provisioning
      - ./resources/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - aya-is-network
    ports:
      - 3000:3000
    depends_on:
      prometheus:
        condition: service_started
      loki:
        condition: service_started
      tempo:
        condition: service_started

volumes:
  postgres-data:
  grafana-data:
  # loki-data:
  tempo-data:

networks:
  aya-is-network:
    driver: bridge
